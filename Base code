#Libraries
#Install the following libraries,(you only need to run the install packages code ONCE) and then load them(you need to do this very time you start
with a new work space)
packages_to_install <- c("forecast", "ggplot2", "gridExtra", "readr","kableExtra")
install.packages(packages_to_install)
library(forecast)
library(ggplot2)
library(gridExtra)
library(readr)
library(kableExtra)
#Import the data set
data_raw = read.csv('C:/Users/nsach/OneDrive/Documents/Datathon code/Datathon_Fall2023_Dataset.csv', stringsAsFactors = F, header = T)
str(data_raw)
#Convert the data into a time series
data = ts(data_raw$Anomaly, start = 1850, frequency = 12)
head(data)

#Plot the data to visualize it. This is not necessary for the actual forecast but it's nice to see what you are working with
autoplot(data, col = 'indianred4') +
theme_bw(base_size = 14) +
ggtitle('Global Land and Ocean Temperature anomalies (1901-2000 mean as 0)') +
xlab('') + ylab('Temperature (Celsius)')

#Create "train" and "test" data sets. Then create a forecast model on the train data
h = 36
data_train = window(data,end = c(2019, 08))
data_test = window(data, start = c(2019, 09))
data_stl12 = stlf(data_train, method = 'naive', h = h)
#Obtain the actual forecasted values
forecast_final = (data_stl12$mean)
forecast_final

#cross-validation
#define the desired STL model as a function (including all parameters), then send full data (NOT just training data), h, and window to it using tsCV()
#If you end up not using stl you will still have to do a version of this to get the CV error.
h = 36
window = 36
fstl = function(x, h){forecast(stlf(x, h = h))}
error = tsCV(data, fstl, h = h, window = window)

#FUNCTION cv_mape
#Returns cross-validation mean absolute percent error
#We are providing this function to you as it might be to difficult to code on your own but in return we require a
#1 slide explanation on your presentation of how it works so we can see that you actually understand it.
cv_mape = function(error, actual) {
actual_table = data.frame(matrix(NA, nrow = length(actual), ncol = h))

for(i in 1:(length(actual)-window)) {
if ((i+window+h-1) <= length(actual)) {actual_table[i+window-1, ] = actual[(i+window):(i+window+h-1)]}
else {actual_table[i+window-1, 1:(length(actual)-(i+window-1))] = actual[(i+window):(length(actual))]}
}
return(100*mean(abs(as.matrix(error) / as.matrix(actual_table)), na.rm = T))
}
#Performance table data frame
#'rmse'= Root Mean Square Error
#'mae'= Mean Absolute Error
#'mape'= Mean Absolute Percent Error
# We are providing you the code for the full error table too, but just like with cv-mape we require at least a 1 slide
# explanation of what this code does and how it works.
perf_stl = data.frame(rbind(
cbind('rmse',
formatC(round(accuracy(data_stl12)[ , 'RMSE'], 5), format = 'f', digits = 5),
formatC(round(sqrt(mean((data_test - data_stl12$mean)^2)), 5), format = 'f', digits = 5),
formatC(round(sqrt(mean(error^2, na.rm = T)), 5), format = 'f', digits = 5)),
cbind('mae',
formatC(round(accuracy(data_stl12)[ , 'MAE'], 5), format = 'f', digits = 5),
formatC(round(mean(abs(data_test - data_stl12$mean)), 5), format = 'f', digits = 5),
formatC(round(mean(abs(error), na.rm = T), 5), format = 'f', digits = 5)),
cbind('mape',
formatC(round(accuracy(data_stl12)[ , 'MAPE'], 5), format = 'f', digits = 5),
formatC(round(mean(100*(abs(data_test - data_stl12$mean)) / data_test), 5), format = 'f', digits = 5),
formatC(round(cv_mape(error, data), 5), format = 'f', digits = 5))),
stringsAsFactors = F)
#Code for turning the data frame above into a nice plot using kable. We require at least a 1 slide
#explanation of what this code does and how it works.
kable(perf_stl, caption = 'Performance - Temperature Anomalies horizon = 12, window = 36', align = 'r', col.names = c('', 'train', 'test', 'cv')) %>%
kable_styling(full_width = F, position = 'l') %>%
column_spec(2, width = '7em') %>%
column_spec(3, width = '4.5em') %>%
column_spec(4, width = '4.5em')
